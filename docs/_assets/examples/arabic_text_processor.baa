// معالج النصوص العربية
// Arabic Text Processor in Baa Language

#تضمين <stdio.h>
#تضمين <string.h>
#تضمين <ctype.h>
#تضمين <stdlib.h>

#تعريف الحد_الأقصى_للنص ١٠٠٠
#تعريف الحد_الأقصى_للكلمة ١٠٠
#تعريف الحد_الأقصى_للكلمات ٥٠٠

// هيكل للإحصائيات
typedef struct {
    عدد_صحيح عدد_الأحرف;
    عدد_صحيح عدد_الكلمات;
    عدد_صحيح عدد_الجمل;
    عدد_صحيح عدد_الفقرات;
    عدد_صحيح عدد_الأحرف_العربية;
    عدد_صحيح عدد_الأحرف_الإنجليزية;
    عدد_صحيح عدد_الأرقام;
    عدد_صحيح عدد_علامات_الترقيم;
} إحصائيات_النص;

// هيكل للكلمة مع تكرارها
typedef struct {
    حرف الكلمة[الحد_الأقصى_للكلمة];
    عدد_صحيح التكرار;
} إحصائية_الكلمة;

// === دوال فحص الأحرف ===

منطقي حرف_عربي(حرف ح) {
    // فحص الأحرف العربية الأساسية (Unicode range: 0x0600-0x06FF)
    عدد_صحيح كود = (عدد_صحيح)ح;
    إرجع (كود >= ٠x٠٦٠٠ && كود <= ٠x٠٦FF) ||
           (كود >= ٠xFE٧٠ && كود <= ٠xFEFF);
}

منطقي حرف_إنجليزي(حرف ح) {
    إرجع (ح >= 'a' && ح <= 'z') || (ح >= 'A' && ح <= 'Z');
}

منطقي رقم(حرف ح) {
    إرجع (ح >= '0' && ح <= '9') || (ح >= '٠' && ح <= '٩');
}

منطقي علامة_ترقيم(حرف ح) {
    حرف علامات[] = ".,;:!?؟،؛";
    عدد_صحيح طول = strlen(علامات);
    
    لكل (عدد_صحيح ي = ٠; ي < طول; ي++) {
        إذا (ح == علامات[ي]) {
            إرجع صحيح;
        }
    }
    إرجع خطأ;
}

منطقي نهاية_جملة(حرف ح) {
    إرجع ح == '.' || ح == '!' || ح == '?' || ح == '؟';
}

منطقي فاصل_كلمة(حرف ح) {
    إرجع ح == ' ' || ح == '\t' || ح == '\n' || ح == '\r';
}

// === دوال معالجة النص ===

فراغ تهيئة_الإحصائيات(إحصائيات_النص* الإحصائيات) {
    الإحصائيات->عدد_الأحرف = ٠;
    الإحصائيات->عدد_الكلمات = ٠;
    الإحصائيات->عدد_الجمل = ٠;
    الإحصائيات->عدد_الفقرات = ٠;
    الإحصائيات->عدد_الأحرف_العربية = ٠;
    الإحصائيات->عدد_الأحرف_الإنجليزية = ٠;
    الإحصائيات->عدد_الأرقام = ٠;
    الإحصائيات->عدد_علامات_الترقيم = ٠;
}

فراغ تحليل_النص(حرف* النص، إحصائيات_النص* الإحصائيات) {
    تهيئة_الإحصائيات(الإحصائيات);
    
    عدد_صحيح الطول = strlen(النص);
    منطقي في_كلمة = خطأ;
    منطقي سطر_فارغ_سابق = صحيح;
    
    لكل (عدد_صحيح ي = ٠; ي < الطول; ي++) {
        حرف الحرف_الحالي = النص[ي];
        
        // عد الأحرف (ما عدا المسافات)
        إذا (الحرف_الحالي != ' ' && الحرف_الحالي != '\t' && 
            الحرف_الحالي != '\n' && الحرف_الحالي != '\r') {
            الإحصائيات->عدد_الأحرف++;
        }
        
        // تصنيف الأحرف
        إذا (حرف_عربي(الحرف_الحالي)) {
            الإحصائيات->عدد_الأحرف_العربية++;
        } وإلا إذا (حرف_إنجليزي(الحرف_الحالي)) {
            الإحصائيات->عدد_الأحرف_الإنجليزية++;
        } وإلا إذا (رقم(الحرف_الحالي)) {
            الإحصائيات->عدد_الأرقام++;
        } وإلا إذا (علامة_ترقيم(الحرف_الحالي)) {
            الإحصائيات->عدد_علامات_الترقيم++;
        }
        
        // عد الكلمات
        إذا (!فاصل_كلمة(الحرف_الحالي) && !في_كلمة) {
            في_كلمة = صحيح;
            الإحصائيات->عدد_الكلمات++;
        } وإلا إذا (فاصل_كلمة(الحرف_الحالي)) {
            في_كلمة = خطأ;
        }
        
        // عد الجمل
        إذا (نهاية_جملة(الحرف_الحالي)) {
            الإحصائيات->عدد_الجمل++;
        }
        
        // عد الفقرات
        إذا (الحرف_الحالي == '\n') {
            إذا (سطر_فارغ_سابق) {
                الإحصائيات->عدد_الفقرات++;
            }
            سطر_فارغ_سابق = صحيح;
        } وإلا إذا (الحرف_الحالي != ' ' && الحرف_الحالي != '\t') {
            سطر_فارغ_سابق = خطأ;
        }
    }
    
    // إضافة فقرة إذا لم ينته النص بسطر فارغ
    إذا (!سطر_فارغ_سابق) {
        الإحصائيات->عدد_الفقرات++;
    }
}

فراغ استخراج_الكلمات(حرف* النص، إحصائية_الكلمة الكلمات[]، عدد_صحيح* عدد_الكلمات) {
    حرف كلمة_حالية[الحد_الأقصى_للكلمة];
    عدد_صحيح مؤشر_الكلمة = ٠;
    عدد_صحيح الطول = strlen(النص);
    *عدد_الكلمات = ٠;
    
    لكل (عدد_صحيح ي = ٠; ي <= الطول; ي++) {
        حرف الحرف_الحالي = (ي < الطول) ? النص[ي] : '\0';
        
        إذا (!فاصل_كلمة(الحرف_الحالي) && الحرف_الحالي != '\0' && 
            !علامة_ترقيم(الحرف_الحالي)) {
            // إضافة حرف للكلمة الحالية
            إذا (مؤشر_الكلمة < الحد_الأقصى_للكلمة - ١) {
                كلمة_حالية[مؤشر_الكلمة++] = الحرف_الحالي;
            }
        } وإلا إذا (مؤشر_الكلمة > ٠) {
            // انتهت الكلمة
            كلمة_حالية[مؤشر_الكلمة] = '\0';
            
            // البحث عن الكلمة في القائمة
            منطقي موجودة = خطأ;
            لكل (عدد_صحيح ج = ٠; ج < *عدد_الكلمات; ج++) {
                إذا (strcmp(الكلمات[ج].الكلمة، كلمة_حالية) == ٠) {
                    الكلمات[ج].التكرار++;
                    موجودة = صحيح;
                    توقف;
                }
            }
            
            // إضافة كلمة جديدة
            إذا (!موجودة && *عدد_الكلمات < الحد_الأقصى_للكلمات) {
                strcpy(الكلمات[*عدد_الكلمات].الكلمة، كلمة_حالية);
                الكلمات[*عدد_الكلمات].التكرار = ١;
                (*عدد_الكلمات)++;
            }
            
            مؤشر_الكلمة = ٠;
        }
    }
}

// دالة ترتيب الكلمات حسب التكرار
فراغ ترتيب_الكلمات(إحصائية_الكلمة الكلمات[]، عدد_صحيح العدد) {
    لكل (عدد_صحيح ي = ٠; ي < العدد - ١; ي++) {
        لكل (عدد_صحيح ج = ي + ١; ج < العدد; ج++) {
            إذا (الكلمات[ي].التكرار < الكلمات[ج].التكرار) {
                إحصائية_الكلمة مؤقت = الكلمات[ي];
                الكلمات[ي] = الكلمات[ج];
                الكلمات[ج] = مؤقت;
            }
        }
    }
}

// === دوال العرض والتقارير ===

فراغ طباعة_الإحصائيات(إحصائيات_النص* الإحصائيات) {
    طباعة("=== إحصائيات النص ===\n");
    طباعة("إجمالي الأحرف: %d\n", الإحصائيات->عدد_الأحرف);
    طباعة("عدد الكلمات: %d\n", الإحصائيات->عدد_الكلمات);
    طباعة("عدد الجمل: %d\n", الإحصائيات->عدد_الجمل);
    طباعة("عدد الفقرات: %d\n", الإحصائيات->عدد_الفقرات);
    طباعة("\n=== تفصيل الأحرف ===\n");
    طباعة("أحرف عربية: %d\n", الإحصائيات->عدد_الأحرف_العربية);
    طباعة("أحرف إنجليزية: %d\n", الإحصائيات->عدد_الأحرف_الإنجليزية);
    طباعة("أرقام: %d\n", الإحصائيات->عدد_الأرقام);
    طباعة("علامات الترقيم: %d\n", الإحصائيات->عدد_علامات_الترقيم);
    
    // إحصائيات إضافية
    إذا (الإحصائيات->عدد_الكلمات > ٠) {
        عدد_حقيقي متوسط_الأحرف_بالكلمة = 
            (عدد_حقيقي)الإحصائيات->عدد_الأحرف / الإحصائيات->عدد_الكلمات;
        طباعة("متوسط الأحرف لكل كلمة: %.2f\n", متوسط_الأحرف_بالكلمة);
    }
    
    إذا (الإحصائيات->عدد_الجمل > ٠) {
        عدد_حقيقي متوسط_الكلمات_بالجملة = 
            (عدد_حقيقي)الإحصائيات->عدد_الكلمات / الإحصائيات->عدد_الجمل;
        طباعة("متوسط الكلمات لكل جملة: %.2f\n", متوسط_الكلمات_بالجملة);
    }
}

فراغ طباعة_الكلمات_الأكثر_تكراراً(إحصائية_الكلمة الكلمات[]، عدد_صحيح العدد، عدد_صحيح الحد) {
    طباعة("\n=== الكلمات الأكثر تكراراً ===\n");
    عدد_صحيح الحد_الفعلي = (العدد < الحد) ? العدد : الحد;
    
    لكل (عدد_صحيح ي = ٠; ي < الحد_الفعلي; ي++) {
        طباعة("%d. %s (%d مرة)\n", ي + ١, الكلمات[ي].الكلمة, الكلمات[ي].التكرار);
    }
}

حرف* إزالة_المسافات_الزائدة(حرف* النص) {
    عدد_صحيح الطول = strlen(النص);
    حرف* نص_نظيف = malloc(الطول + ١);
    عدد_صحيح مؤشر_النظيف = ٠;
    منطقي مسافة_سابقة = صحيح;
    
    لكل (عدد_صحيح ي = ٠; ي < الطول; ي++) {
        إذا (النص[ي] == ' ' || النص[ي] == '\t') {
            إذا (!مسافة_سابقة) {
                نص_نظيف[مؤشر_النظيف++] = ' ';
                مسافة_سابقة = صحيح;
            }
        } وإلا {
            نص_نظيف[مؤشر_النظيف++] = النص[ي];
            مسافة_سابقة = خطأ;
        }
    }
    
    نص_نظيف[مؤشر_النظيف] = '\0';
    إرجع نص_نظيف;
}

// === الدالة الرئيسية ===

عدد_صحيح الرئيسية() {
    حرف النص[الحد_الأقصى_للنص];
    إحصائيات_النص الإحصائيات;
    إحصائية_الكلمة الكلمات[الحد_الأقصى_للكلمات];
    عدد_صحيح عدد_الكلمات;
    
    طباعة("=== معالج النصوص العربية ===\n");
    طباعة("أدخل النص المراد تحليله (اضغط Enter مرتين لإنهاء الإدخال):\n");
    
    // قراءة النص
    حرف سطر[٢٠٠];
    النص[٠] = '\0';
    عدد_صحيح أسطر_فارغة = ٠;
    
    طالما (fgets(سطر, sizeof(سطر), stdin) != فارغ && أسطر_فارغة < ٢) {
        إذا (strlen(سطر) <= ١) {  // سطر فارغ
            أسطر_فارغة++;
        } وإلا {
            أسطر_فارغة = ٠;
            strcat(النص, سطر);
        }
    }
    
    إذا (strlen(النص) == ٠) {
        طباعة("لم يتم إدخال أي نص!\n");
        إرجع ١;
    }
    
    // تحليل النص
    تحليل_النص(النص, &الإحصائيات);
    طباعة_الإحصائيات(&الإحصائيات);
    
    // استخراج وترتيب الكلمات
    استخراج_الكلمات(النص, الكلمات, &عدد_الكلمات);
    ترتيب_الكلمات(الكلمات, عدد_الكلمات);
    طباعة_الكلمات_الأكثر_تكراراً(الكلمات, عدد_الكلمات, ١٠);
    
    // تنظيف النص
    حرف* نص_نظيف = إزالة_المسافات_الزائدة(النص);
    طباعة("\n=== النص بعد التنظيف ===\n");
    طباعة("%s\n", نص_نظيف);
    
    // تحليل مقروئية النص
    طباعة("\n=== تقييم مقروئية النص ===\n");
    إذا (الإحصائيات.عدد_الجمل > ٠) {
        عدد_حقيقي متوسط_الكلمات = 
            (عدد_حقيقي)الإحصائيات.عدد_الكلمات / الإحصائيات.عدد_الجمل;
        
        إذا (متوسط_الكلمات <= ١٠) {
            طباعة("مستوى المقروئية: سهل\n");
        } وإلا إذا (متوسط_الكلمات <= ٢٠) {
            طباعة("مستوى المقروئية: متوسط\n");
        } وإلا {
            طباعة("مستوى المقروئية: صعب\n");
        }
    }
    
    free(نص_نظيف);
    
    طباعة("\nشكراً لاستخدام معالج النصوص العربية!\n");
    إرجع ٠;
}
