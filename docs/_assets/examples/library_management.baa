// نظام إدارة المكتبة
// Library Management System in Baa Language

#تضمين <stdio.h>
#تضمين <string.h>
#تضمين <stdlib.h>
#تضمين <time.h>

#تعريف الحد_الأقصى_للكتب ١٠٠٠
#تعريف الحد_الأقصى_للأعضاء ٥٠٠
#تعريف الحد_الأقصى_للاستعارات ٢٠٠٠
#تعريف طول_النص_الأقصى ٢٠٠
#تعريف فترة_الاستعارة_الافتراضية ١٤  // يوم

// حالات الكتاب
typedef enum {
    متاح = ١,
    مُستعار = ٢,
    محجوز = ٣,
    قيد_الصيانة = ٤
} حالة_الكتاب;

// أنواع العضوية
typedef enum {
    طالب = ١,
    أستاذ = ٢,
    باحث = ٣,
    عضو_عام = ٤
} نوع_العضوية;

// هيكل الكتاب
typedef struct {
    عدد_صحيح معرف_الكتاب;
    حرف العنوان[طول_النص_الأقصى];
    حرف المؤلف[طول_النص_الأقصى];
    حرف الناشر[طول_النص_الأقصى];
    عدد_صحيح سنة_النشر;
    حرف الرقم_المعياري[٢٠];  // ISBN
    حرف الفئة[١٠٠];
    حالة_الكتاب الحالة;
    عدد_صحيح عدد_النسخ;
    عدد_صحيح النسخ_المتاحة;
} كتاب;

// هيكل العضو
typedef struct {
    عدد_صحيح معرف_العضو;
    حرف الاسم_الكامل[طول_النص_الأقصى];
    حرف رقم_الهاتف[٢٠];
    حرف البريد_الإلكتروني[١٠٠];
    حرف العنوان[طول_النص_الأقصى];
    نوع_العضوية نوع_العضو;
    time_t تاريخ_التسجيل;
    منطقي نشط;
    عدد_صحيح عدد_الكتب_المستعارة;
} عضو;

// هيكل الاستعارة
typedef struct {
    عدد_صحيح معرف_الاستعارة;
    عدد_صحيح معرف_الكتاب;
    عدد_صحيح معرف_العضو;
    time_t تاريخ_الاستعارة;
    time_t تاريخ_الاستحقاق;
    time_t تاريخ_الإرجاع;  // ٠ إذا لم يُرجع بعد
    عدد_حقيقي الغرامة;
    منطقي مُرجع;
} استعارة;

// المتغيرات العامة
كتاب الكتب[الحد_الأقصى_للكتب];
عضو الأعضاء[الحد_الأقصى_للأعضاء];
استعارة الاستعارات[الحد_الأقصى_للاستعارات];

عدد_صحيح عدد_الكتب = ٠;
عدد_صحيح عدد_الأعضاء = ٠;
عدد_صحيح عدد_الاستعارات = ٠;

عدد_صحيح آخر_معرف_كتاب = ١٠٠٠;
عدد_صحيح آخر_معرف_عضو = ٢٠٠٠;
عدد_صحيح آخر_معرف_استعارة = ٣٠٠٠;

// === دوال مساعدة ===

حرف* حالة_الكتاب_إلى_نص(حالة_الكتاب الحالة) {
    switch (الحالة) {
        حالة متاح: إرجع "متاح";
        حالة مُستعار: إرجع "مُستعار";
        حالة محجوز: إرجع "محجوز";
        حالة قيد_الصيانة: إرجع "قيد الصيانة";
        افتراضي: إرجع "غير معروف";
    }
}

حرف* نوع_العضوية_إلى_نص(نوع_العضوية النوع) {
    switch (النوع) {
        حالة طالب: إرجع "طالب";
        حالة أستاذ: إرجع "أستاذ";
        حالة باحث: إرجع "باحث";
        حالة عضو_عام: إرجع "عضو عام";
        افتراضي: إرجع "غير معروف";
    }
}

عدد_صحيح أيام_بين_التواريخ(time_t التاريخ_الأول، time_t التاريخ_الثاني) {
    double الفرق = difftime(التاريخ_الثاني، التاريخ_الأول);
    إرجع (عدد_صحيح)(الفرق / (٢٤ * ٦٠ * ٦٠));
}

// === دوال إدارة الكتب ===

عدد_صحيح إضافة_كتاب() {
    إذا (عدد_الكتب >= الحد_الأقصى_للكتب) {
        طباعة("خطأ: وصل عدد الكتب للحد الأقصى!\n");
        إرجع -١;
    }
    
    كتاب* كتاب_جديد = &الكتب[عدد_الكتب];
    كتاب_جديد->معرف_الكتاب = ++آخر_معرف_كتاب;
    
    طباعة("=== إضافة كتاب جديد ===\n");
    طباعة("عنوان الكتاب: ");
    fgets(كتاب_جديد->العنوان، sizeof(كتاب_جديد->العنوان), stdin);
    كتاب_جديد->العنوان[strcspn(كتاب_جديد->العنوان، "\n")] = '\0';
    
    طباعة("اسم المؤلف: ");
    fgets(كتاب_جديد->المؤلف، sizeof(كتاب_جديد->المؤلف), stdin);
    كتاب_جديد->المؤلف[strcspn(كتاب_جديد->المؤلف، "\n")] = '\0';
    
    طباعة("الناشر: ");
    fgets(كتاب_جديد->الناشر، sizeof(كتاب_جديد->الناشر), stdin);
    كتاب_جديد->الناشر[strcspn(كتاب_جديد->الناشر، "\n")] = '\0';
    
    طباعة("سنة النشر: ");
    scanf("%d", &كتاب_جديد->سنة_النشر);
    getchar(); // تنظيف buffer
    
    طباعة("الرقم المعياري (ISBN): ");
    fgets(كتاب_جديد->الرقم_المعياري، sizeof(كتاب_جديد->الرقم_المعياري), stdin);
    كتاب_جديد->الرقم_المعياري[strcspn(كتاب_جديد->الرقم_المعياري، "\n")] = '\0';
    
    طباعة("الفئة: ");
    fgets(كتاب_جديد->الفئة، sizeof(كتاب_جديد->الفئة), stdin);
    كتاب_جديد->الفئة[strcspn(كتاب_جديد->الفئة، "\n")] = '\0';
    
    طباعة("عدد النسخ: ");
    scanf("%d", &كتاب_جديد->عدد_النسخ);
    getchar();
    
    كتاب_جديد->النسخ_المتاحة = كتاب_جديد->عدد_النسخ;
    كتاب_جديد->الحالة = متاح;
    
    عدد_الكتب++;
    
    طباعة("تم إضافة الكتاب بنجاح! معرف الكتاب: %d\n", كتاب_جديد->معرف_الكتاب);
    إرجع كتاب_جديد->معرف_الكتاب;
}

كتاب* البحث_عن_كتاب_بالمعرف(عدد_صحيح المعرف) {
    لكل (عدد_صحيح ي = ٠; ي < عدد_الكتب; ي++) {
        إذا (الكتب[ي].معرف_الكتاب == المعرف) {
            إرجع &الكتب[ي];
        }
    }
    إرجع فارغ;
}

فراغ البحث_عن_كتاب_بالعنوان() {
    حرف مصطلح_البحث[طول_النص_الأقصى];
    طباعة("أدخل العنوان أو جزء منه: ");
    fgets(مصطلح_البحث، sizeof(مصطلح_البحث), stdin);
    مصطلح_البحث[strcspn(مصطلح_البحث، "\n")] = '\0';
    
    طباعة("\n=== نتائج البحث ===\n");
    منطقي وُجد = خطأ;
    
    لكل (عدد_صحيح ي = ٠; ي < عدد_الكتب; ي++) {
        إذا (strstr(الكتب[ي].العنوان، مصطلح_البحث) != فارغ) {
            طباعة("معرف: %d | العنوان: %s | المؤلف: %s | الحالة: %s\n",
                   الكتب[ي].معرف_الكتاب، الكتب[ي].العنوان، 
                   الكتب[ي].المؤلف، حالة_الكتاب_إلى_نص(الكتب[ي].الحالة));
            وُجد = صحيح;
        }
    }
    
    إذا (!وُجد) {
        طباعة("لم توجد كتب تطابق البحث.\n");
    }
}

فراغ عرض_تفاصيل_كتاب(عدد_صحيح المعرف) {
    كتاب* الكتاب = البحث_عن_كتاب_بالمعرف(المعرف);
    
    إذا (الكتاب == فارغ) {
        طباعة("الكتاب غير موجود!\n");
        إرجع;
    }
    
    طباعة("\n=== تفاصيل الكتاب ===\n");
    طباعة("المعرف: %d\n", الكتاب->معرف_الكتاب);
    طباعة("العنوان: %s\n", الكتاب->العنوان);
    طباعة("المؤلف: %s\n", الكتاب->المؤلف);
    طباعة("الناشر: %s\n", الكتاب->الناشر);
    طباعة("سنة النشر: %d\n", الكتاب->سنة_النشر);
    طباعة("الرقم المعياري: %s\n", الكتاب->الرقم_المعياري);
    طباعة("الفئة: %s\n", الكتاب->الفئة);
    طباعة("إجمالي النسخ: %d\n", الكتاب->عدد_النسخ);
    طباعة("النسخ المتاحة: %d\n", الكتاب->النسخ_المتاحة);
    طباعة("الحالة: %s\n", حالة_الكتاب_إلى_نص(الكتاب->الحالة));
}

// === دوال إدارة الأعضاء ===

عدد_صحيح إضافة_عضو() {
    إذا (عدد_الأعضاء >= الحد_الأقصى_للأعضاء) {
        طباعة("خطأ: وصل عدد الأعضاء للحد الأقصى!\n");
        إرجع -١;
    }
    
    عضو* عضو_جديد = &الأعضاء[عدد_الأعضاء];
    عضو_جديد->معرف_العضو = ++آخر_معرف_عضو;
    
    طباعة("=== تسجيل عضو جديد ===\n");
    طباعة("الاسم الكامل: ");
    fgets(عضو_جديد->الاسم_الكامل، sizeof(عضو_جديد->الاسم_الكامل), stdin);
    عضو_جديد->الاسم_الكامل[strcspn(عضو_جديد->الاسم_الكامل، "\n")] = '\0';
    
    طباعة("رقم الهاتف: ");
    fgets(عضو_جديد->رقم_الهاتف، sizeof(عضو_جديد->رقم_الهاتف), stdin);
    عضو_جديد->رقم_الهاتف[strcspn(عضو_جديد->رقم_الهاتف، "\n")] = '\0';
    
    طباعة("البريد الإلكتروني: ");
    fgets(عضو_جديد->البريد_الإلكتروني، sizeof(عضو_جديد->البريد_الإلكتروني), stdin);
    عضو_جديد->البريد_الإلكتروني[strcspn(عضو_جديد->البريد_الإلكتروني، "\n")] = '\0';
    
    طباعة("العنوان: ");
    fgets(عضو_جديد->العنوان، sizeof(عضو_جديد->العنوان), stdin);
    عضو_جديد->العنوان[strcspn(عضو_جديد->العنوان، "\n")] = '\0';
    
    طباعة("نوع العضوية (١=طالب، ٢=أستاذ، ٣=باحث، ٤=عضو عام): ");
    عدد_صحيح نوع;
    scanf("%d", &نوع);
    getchar();
    عضو_جديد->نوع_العضو = (نوع_العضوية)نوع;
    
    عضو_جديد->تاريخ_التسجيل = time(فارغ);
    عضو_جديد->نشط = صحيح;
    عضو_جديد->عدد_الكتب_المستعارة = ٠;
    
    عدد_الأعضاء++;
    
    طباعة("تم تسجيل العضو بنجاح! رقم العضوية: %d\n", عضو_جديد->معرف_العضو);
    إرجع عضو_جديد->معرف_العضو;
}

عضو* البحث_عن_عضو_بالمعرف(عدد_صحيح المعرف) {
    لكل (عدد_صحيح ي = ٠; ي < عدد_الأعضاء; ي++) {
        إذا (الأعضاء[ي].معرف_العضو == المعرف) {
            إرجع &الأعضاء[ي];
        }
    }
    إرجع فارغ;
}

// === دوال إدارة الاستعارات ===

عدد_صحيح استعارة_كتاب(عدد_صحيح معرف_الكتاب، عدد_صحيح معرف_العضو) {
    كتاب* الكتاب = البحث_عن_كتاب_بالمعرف(معرف_الكتاب);
    عضو* العضو = البحث_عن_عضو_بالمعرف(معرف_العضو);
    
    إذا (الكتاب == فارغ) {
        طباعة("خطأ: الكتاب غير موجود!\n");
        إرجع -١;
    }
    
    إذا (العضو == فارغ) {
        طباعة("خطأ: العضو غير موجود!\n");
        إرجع -١;
    }
    
    إذا (!العضو->نشط) {
        طباعة("خطأ: عضوية المستخدم غير نشطة!\n");
        إرجع -١;
    }
    
    إذا (الكتاب->النسخ_المتاحة <= ٠) {
        طباعة("خطأ: لا توجد نسخ متاحة من هذا الكتاب!\n");
        إرجع -١;
    }
    
    // التحقق من حد الاستعارة للعضو
    عدد_صحيح حد_الاستعارة;
    switch (العضو->نوع_العضو) {
        حالة طالب: حد_الاستعارة = ٣; توقف;
        حالة أستاذ: حد_الاستعارة = ١٠; توقف;
        حالة باحث: حد_الاستعارة = ٧; توقف;
        حالة عضو_عام: حد_الاستعارة = ٢; توقف;
        افتراضي: حد_الاستعارة = ٢; توقف;
    }
    
    إذا (العضو->عدد_الكتب_المستعارة >= حد_الاستعارة) {
        طباعة("خطأ: وصل العضو للحد الأقصى من الكتب المستعارة (%d كتب)!\n", حد_الاستعارة);
        إرجع -١;
    }
    
    إذا (عدد_الاستعارات >= الحد_الأقصى_للاستعارات) {
        طباعة("خطأ: وصل عدد الاستعارات للحد الأقصى!\n");
        إرجع -١;
    }
    
    // إنشاء الاستعارة
    استعارة* استعارة_جديدة = &الاستعارات[عدد_الاستعارات];
    استعارة_جديدة->معرف_الاستعارة = ++آخر_معرف_استعارة;
    استعارة_جديدة->معرف_الكتاب = معرف_الكتاب;
    استعارة_جديدة->معرف_العضو = معرف_العضو;
    استعارة_جديدة->تاريخ_الاستعارة = time(فارغ);
    استعارة_جديدة->تاريخ_الاستحقاق = استعارة_جديدة->تاريخ_الاستعارة + (فترة_الاستعارة_الافتراضية * ٢٤ * ٦٠ * ٦٠);
    استعارة_جديدة->تاريخ_الإرجاع = ٠;
    استعارة_جديدة->الغرامة = ٠٫٠;
    استعارة_جديدة->مُرجع = خطأ;
    
    // تحديث بيانات الكتاب والعضو
    الكتاب->النسخ_المتاحة--;
    إذا (الكتاب->النسخ_المتاحة == ٠) {
        الكتاب->الحالة = مُستعار;
    }
    العضو->عدد_الكتب_المستعارة++;
    
    عدد_الاستعارات++;
    
    طباعة("تمت الاستعارة بنجاح!\n");
    طباعة("رقم الاستعارة: %d\n", استعارة_جديدة->معرف_الاستعارة);
    char* تاريخ_الاستحقاق_نص = ctime(&استعارة_جديدة->تاريخ_الاستحقاق);
    طباعة("تاريخ الاستحقاق: %s", تاريخ_الاستحقاق_نص);
    
    إرجع استعارة_جديدة->معرف_الاستعارة;
}

عدد_صحيح إرجاع_كتاب(عدد_صحيح معرف_الاستعارة) {
    استعارة* الاستعارة = فارغ;
    
    // البحث عن الاستعارة
    لكل (عدد_صحيح ي = ٠; ي < عدد_الاستعارات; ي++) {
        إذا (الاستعارات[ي].معرف_الاستعارة == معرف_الاستعارة && !الاستعارات[ي].مُرجع) {
            الاستعارة = &الاستعارات[ي];
            توقف;
        }
    }
    
    إذا (الاستعارة == فارغ) {
        طباعة("خطأ: الاستعارة غير موجودة أو تم إرجاع الكتاب مسبقاً!\n");
        إرجع -١;
    }
    
    كتاب* الكتاب = البحث_عن_كتاب_بالمعرف(الاستعارة->معرف_الكتاب);
    عضو* العضو = البحث_عن_عضو_بالمعرف(الاستعارة->معرف_العضو);
    
    // تحديث تاريخ الإرجاع
    الاستعارة->تاريخ_الإرجاع = time(فارغ);
    الاستعارة->مُرجع = صحيح;
    
    // حساب الغرامة إذا كان متأخراً
    عدد_صحيح أيام_التأخير = أيام_بين_التواريخ(الاستعارة->تاريخ_الاستحقاق، الاستعارة->تاريخ_الإرجاع);
    إذا (أيام_التأخير > ٠) {
        الاستعارة->الغرامة = أيام_التأخير * ٢٫٠;  // ٢ ريال لكل يوم تأخير
        طباعة("تحذير: الكتاب متأخر %d يوم!\n", أيام_التأخير);
        طباعة("الغرامة المستحقة: %.2f ريال\n", الاستعارة->الغرامة);
    }
    
    // تحديث بيانات الكتاب والعضو
    الكتاب->النسخ_المتاحة++;
    إذا (الكتاب->النسخ_المتاحة > ٠) {
        الكتاب->الحالة = متاح;
    }
    العضو->عدد_الكتب_المستعارة--;
    
    طباعة("تم إرجاع الكتاب بنجاح!\n");
    إرجع ٠;
}

// === دوال التقارير ===

فراغ تقرير_الكتب_المستعارة() {
    طباعة("\n=== تقرير الكتب المستعارة حالياً ===\n");
    منطقي يوجد_استعارات = خطأ;
    
    لكل (عدد_صحيح ي = ٠; ي < عدد_الاستعارات; ي++) {
        إذا (!الاستعارات[ي].مُرجع) {
            كتاب* الكتاب = البحث_عن_كتاب_بالمعرف(الاستعارات[ي].معرف_الكتاب);
            عضو* العضو = البحث_عن_عضو_بالمعرف(الاستعارات[ي].معرف_العضو);
            
            إذا (الكتاب && العضو) {
                طباعة("استعارة #%d\n", الاستعارات[ي].معرف_الاستعارة);
                طباعة("  الكتاب: %s\n", الكتاب->العنوان);
                طباعة("  المستعير: %s\n", العضو->الاسم_الكامل);
                
                char* تاريخ_الاستحقاق = ctime(&الاستعارات[ي].تاريخ_الاستحقاق);
                طباعة("  تاريخ الاستحقاق: %s", تاريخ_الاستحقاق);
                
                عدد_صحيح أيام_متبقية = أيام_بين_التواريخ(time(فارغ), الاستعارات[ي].تاريخ_الاستحقاق);
                إذا (أيام_متبقية < ٠) {
                    طباعة("  ⚠️  متأخر %d يوم!\n", -أيام_متبقية);
                } وإلا {
                    طباعة("  ✅ يبقى %d يوم\n", أيام_متبقية);
                }
                طباعة("\n");
                يوجد_استعارات = صحيح;
            }
        }
    }
    
    إذا (!يوجد_استعارات) {
        طباعة("لا توجد كتب مستعارة حالياً.\n");
    }
}

فراغ تقرير_إحصائيات_عامة() {
    طباعة("\n=== إحصائيات المكتبة ===\n");
    طباعة("إجمالي الكتب: %d\n", عدد_الكتب);
    طباعة("إجمالي الأعضاء: %d\n", عدد_الأعضاء);
    طباعة("إجمالي الاستعارات: %d\n", عدد_الاستعارات);
    
    // حساب النسخ المتاحة والمستعارة
    عدد_صحيح إجمالي_النسخ = ٠;
    عدد_صحيح النسخ_المتاحة = ٠;
    
    لكل (عدد_صحيح ي = ٠; ي < عدد_الكتب; ي++) {
        إجمالي_النسخ += الكتب[ي].عدد_النسخ;
        النسخ_المتاحة += الكتب[ي].النسخ_المتاحة;
    }
    
    طباعة("إجمالي النسخ: %d\n", إجمالي_النسخ);
    طباعة("النسخ المتاحة: %d\n", النسخ_المتاحة);
    طباعة("النسخ المستعارة: %d\n", إجمالي_النسخ - النسخ_المتاحة);
    
    // حساب الاستعارات النشطة
    عدد_صحيح الاستعارات_النشطة = ٠;
    لكل (عدد_صحيح ي = ٠; ي < عدد_الاستعارات; ي++) {
        إذا (!الاستعارات[ي].مُرجع) {
            الاستعارات_النشطة++;
        }
    }
    طباعة("الاستعارات النشطة: %d\n", الاستعارات_النشطة);
}

// === القائمة الرئيسية ===

فراغ عرض_القائمة_الرئيسية() {
    طباعة("\n=== نظام إدارة المكتبة ===\n");
    طباعة("١. إدارة الكتب\n");
    طباعة("٢. إدارة الأعضاء\n");
    طباعة("٣. إدارة الاستعارات\n");
    طباعة("٤. التقارير\n");
    طباعة("٠. الخروج\n");
    طباعة("اختيارك: ");
}

فراغ قائمة_إدارة_الكتب() {
    عدد_صحيح الاختيار;
    
    طالما (صحيح) {
        طباعة("\n=== إدارة الكتب ===\n");
        طباعة("١. إضافة كتاب جديد\n");
        طباعة("٢. البحث بالعنوان\n");
        طباعة("٣. عرض تفاصيل كتاب\n");
        طباعة("٠. العودة للقائمة الرئيسية\n");
        طباعة("اختيارك: ");
        
        scanf("%d", &الاختيار);
        getchar();
        
        switch (الاختيار) {
            حالة ١:
                إضافة_كتاب();
                توقف;
            حالة ٢:
                البحث_عن_كتاب_بالعنوان();
                توقف;
            حالة ٣:
                طباعة("أدخل معرف الكتاب: ");
                عدد_صحيح معرف;
                scanf("%d", &معرف);
                getchar();
                عرض_تفاصيل_كتاب(معرف);
                توقف;
            حالة ٠:
                إرجع;
            افتراضي:
                طباعة("اختيار غير صحيح!\n");
                توقف;
        }
    }
}

فراغ قائمة_إدارة_الأعضاء() {
    عدد_صحيح الاختيار;
    
    طالما (صحيح) {
        طباعة("\n=== إدارة الأعضاء ===\n");
        طباعة("١. تسجيل عضو جديد\n");
        طباعة("٠. العودة للقائمة الرئيسية\n");
        طباعة("اختيارك: ");
        
        scanf("%d", &الاختيار);
        getchar();
        
        switch (الاختيار) {
            حالة ١:
                إضافة_عضو();
                توقف;
            حالة ٠:
                إرجع;
            افتراضي:
                طباعة("اختيار غير صحيح!\n");
                توقف;
        }
    }
}

فراغ قائمة_إدارة_الاستعارات() {
    عدد_صحيح الاختيار;
    
    طالما (صحيح) {
        طباعة("\n=== إدارة الاستعارات ===\n");
        طباعة("١. استعارة كتاب\n");
        طباعة("٢. إرجاع كتاب\n");
        طباعة("٠. العودة للقائمة الرئيسية\n");
        طباعة("اختيارك: ");
        
        scanf("%d", &الاختيار);
        getchar();
        
        switch (الاختيار) {
            حالة ١:
                طباعة("معرف الكتاب: ");
                عدد_صحيح معرف_الكتاب;
                scanf("%d", &معرف_الكتاب);
                
                طباعة("معرف العضو: ");
                عدد_صحيح معرف_العضو;
                scanf("%d", &معرف_العضو);
                getchar();
                
                استعارة_كتاب(معرف_الكتاب، معرف_العضو);
                توقف;
                
            حالة ٢:
                طباعة("رقم الاستعارة: ");
                عدد_صحيح رقم_الاستعارة;
                scanf("%d", &رقم_الاستعارة);
                getchar();
                
                إرجاع_كتاب(رقم_الاستعارة);
                توقف;
                
            حالة ٠:
                إرجع;
            افتراضي:
                طباعة("اختيار غير صحيح!\n");
                توقف;
        }
    }
}

فراغ قائمة_التقارير() {
    عدد_صحيح الاختيار;
    
    طالما (صحيح) {
        طباعة("\n=== التقارير ===\n");
        طباعة("١. الكتب المستعارة حالياً\n");
        طباعة("٢. الإحصائيات العامة\n");
        طباعة("٠. العودة للقائمة الرئيسية\n");
        طباعة("اختيارك: ");
        
        scanf("%d", &الاختيار);
        getchar();
        
        switch (الاختيار) {
            حالة ١:
                تقرير_الكتب_المستعارة();
                توقف;
            حالة ٢:
                تقرير_إحصائيات_عامة();
                توقف;
            حالة ٠:
                إرجع;
            افتراضي:
                طباعة("اختيار غير صحيح!\n");
                توقف;
        }
    }
}

// === الدالة الرئيسية ===

عدد_صحيح الرئيسية() {
    عدد_صحيح الاختيار;
    
    طباعة("مرحباً بك في نظام إدارة المكتبة!\n");
    طباعة("تم تطوير هذا النظام بلغة باء العربية\n");
    
    طالما (صحيح) {
        عرض_القائمة_الرئيسية();
        scanf("%d", &الاختيار);
        getchar(); // تنظيف buffer
        
        switch (الاختيار) {
            حالة ١:
                قائمة_إدارة_الكتب();
                توقف;
            حالة ٢:
                قائمة_إدارة_الأعضاء();
                توقف;
            حالة ٣:
                قائمة_إدارة_الاستعارات();
                توقف;
            حالة ٤:
                قائمة_التقارير();
                توقف;
            حالة ٠:
                طباعة("شكراً لاستخدام نظام إدارة المكتبة!\n");
                إرجع ٠;
            افتراضي:
                طباعة("اختيار غير صحيح! حاول مرة أخرى.\n");
                توقف;
        }
    }
    
    إرجع ٠;
}
